{"version":3,"sources":["contactService.ts","Message.tsx","AddContact.tsx","List.tsx","App.tsx","index.tsx"],"names":["BASE_URL","useContacts","useState","contacts","setContacts","message","setMessage","editedContact","setEditedContact","newContact","setNewContact","deletedContact","setDeleteContact","useEffect","hasCanceled","axios","get","then","response","data","responseContacts","catch","error","Error","contact","put","id","responseContact","prev","filter","undefined","name","post","console","delete","setTimeout","Message","className","AddContact","newName","newNumber","onNameChange","onNumberChange","onSubmit","value","onChange","type","List","onDelete","toLowerCase","includes","map","number","key","onClick","Filter","App","updateContact","createContact","deleteContact","setNewName","setNewNumber","setFilter","event","target","e","preventDefault","every","person","window","confirm","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b187df36.chunk.js","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nconst BASE_URL = '/api/persons'\n\nexport function getContacts(): Promise<Contact[]> {\n  return axios.get<Contact[]>(BASE_URL)\n    .then(response => response.data)\n}\n\nexport function putContact(contact: Contact): Promise<Contact> {\n  return axios.put<Contact>(`${BASE_URL}/${contact.id}`, contact)\n    .then(response => response.data)\n}\n\nexport function postContact(contact: Contact): Promise<Contact> {\n  return axios.post<Contact>(BASE_URL, contact)\n    .then(response => response.data)\n}\n\nexport function deleteContact(contact: Contact): Promise<Contact> {\n  return axios.delete<Contact>(`${BASE_URL}/${contact.id}`)\n    .then(response => response.data)\n}\n\nexport function useContacts(): [Contact[], { message: string, error: boolean } | undefined, (contact: Contact) => void, (contact: Contact) => void, (contact: Contact) => void] {\n  const [contacts, setContacts] = useState<Contact[]>([])\n  const [message, setMessage] = useState<{ message: string, error: boolean } | undefined>()\n  const [editedContact, setEditedContact] = useState<Contact | undefined>()\n  const [newContact, setNewContact] = useState<Contact | undefined>()\n  const [deletedContact, setDeleteContact] = useState<Contact | undefined>()\n\n  useEffect(() => {\n    let hasCanceled = false\n\n    getContacts()\n      .then(responseContacts => {\n        if (!hasCanceled)\n          setContacts(responseContacts)\n      })\n      .catch(error => {\n        if (hasCanceled)\n          return\n        if (error instanceof Error)\n          setMessage({ message: error.message, error: true })\n        else\n          setMessage({ message: \"unable to fetch contacts\", error: true })\n      })\n    return () => { hasCanceled = true }\n  }, [])\n\n  useEffect(() => {\n    let hasCanceled = false\n    if (editedContact) {\n      putContact(editedContact)\n        .then(responseContact => {\n          if (!hasCanceled) {\n            setContacts(prev => [...prev.filter(({ id }) => id !== responseContact.id), responseContact])\n            setEditedContact(undefined)\n            setMessage({ message: `Updated contact ${responseContact.name}`, error: false })\n          }\n        })\n        .catch(error => {\n          if (hasCanceled)\n            return\n          if (error instanceof Error)\n            setMessage({ message: error.message, error: true })\n          else\n            setMessage({ message: \"unable to put contact\", error: true })\n        })\n    }\n    return () => { hasCanceled = true }\n  }, [editedContact])\n\n  useEffect(() => {\n    let hasCanceled = false\n    if (newContact)\n      postContact(newContact)\n        .then(responseContact => {\n          if (!hasCanceled) {\n            setContacts(prev => [...prev, responseContact])\n            setNewContact(undefined)\n            setMessage({ message: `Created contact ${responseContact.name}`, error: false })\n          }\n        })\n        .catch(error => {\n          console.error(error)\n          if (hasCanceled)\n            return\n          if (error.response && error.response.data)\n            setMessage({ message: error.response.data.error, error: true })\n          else\n            setMessage({ message: \"unable to store new contact\", error: true })\n        })\n\n\n    return () => { hasCanceled = true }\n  }, [newContact])\n\n  useEffect(() => {\n    let hasCanceled = false\n    if (deletedContact)\n      deleteContact(deletedContact)\n        .then(() => {\n          if (!hasCanceled) {\n            setContacts(prev => prev.filter(({ id }) => id !== deletedContact.id))\n            setDeleteContact(undefined)\n            setMessage({ message: `Deleted contact ${deletedContact.name}`, error: false })\n          }\n        })\n        .catch(error => {\n          if (!hasCanceled)\n            setMessage({ message: `unable to delete contact ${deletedContact.name}`, error: true })\n        })\n\n\n    return () => { hasCanceled = true }\n  }, [deletedContact])\n\n  useEffect(() => {\n    let hasCanceled = false\n    if (message)\n      setTimeout(() => !hasCanceled && setMessage(undefined), 5000)\n\n    return () => { hasCanceled = true }\n  }, [message])\n\n  return [contacts, message, setEditedContact, setNewContact, setDeleteContact]\n}\n","import React from 'react'\n\ntype Props = {\n  message: string\n  error: boolean\n}\n\nexport default function Message({ message, error }: Props) {\n  return (\n    <div className={`message ${error ? \"error\" : \"\"}`}>\n      <p>{message}</p>\n    </div>\n  )\n}\n","import React from 'react'\n\ntype AddNewProps = {\n  newName: string\n  newNumber: string\n  onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onNumberChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onSubmit: (event: React.FormEvent) => void\n}\n\nconst AddContact = ({ newName, newNumber, onNameChange, onNumberChange, onSubmit }: AddNewProps) => (\n  <form onSubmit={onSubmit}>\n    <div>\n      name: <input value={newName} onChange={onNameChange} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={onNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nexport default AddContact","import React from 'react'\n\n\ntype ListProps = {\n  contacts: Contact[]\n  filter: string\n  onDelete: (contact: Contact) => void\n}\n\nconst List = ({ filter, contacts, onDelete }: ListProps) => (\n  <ul>\n    {\n      contacts\n        .filter(({ name }) => name.toLowerCase().includes(filter))\n        .map(({ name, number, id }) => (\n          <li key={id}>{name}, {number}, <button onClick={() => onDelete({ name, number, id })}>delete</button></li>\n        ))}\n  </ul>\n)\n\nexport default List","import React, { useState } from 'react'\nimport { useContacts } from './contactService'\nimport Message from './Message'\nimport AddContact from './AddContact'\nimport List from './List'\n\nconst App = () => {\n  const [contacts, message, updateContact, createContact, deleteContact] = useContacts()\n  const [newName, setNewName] = useState<string>('')\n  const [newNumber, setNewNumber] = useState<string>('')\n  const [filter, setFilter] = useState<string>('')\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault()\n    if (contacts.every(person => person.name !== newName)) {\n      createContact({ name: newName, number: newNumber, id: \"\" })\n      setNewName('')\n      setNewNumber('')\n    }\n    else {\n      const response = window.confirm(`${newName} is already in the phonebook, replace old phone number with new one`)\n      if (response) {\n        const contact = contacts.find(({ name }) => name === newName)\n        if (contact)\n          updateContact({ ...contact, number: newNumber })\n      }\n    }\n  }\n\n  function handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setNewName(event.target.value)\n  }\n\n  function handleNumberChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setNewNumber(event.target.value)\n  }\n\n  function handleFilterChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setFilter(event.target.value)\n  }\n\n  function handleDelete(contact: Contact) {\n    const response = window.confirm(`Delete ${contact.name}`)\n    response && deleteContact(contact)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {message && <Message {...message} />}\n      <Filter onChange={handleFilterChange} />\n      <h2>Add new</h2>\n      <AddContact newName={newName} newNumber={newNumber} onNameChange={handleNameChange} onNumberChange={handleNumberChange} onSubmit={handleSubmit} />\n      <h2>Numbers</h2>\n      {contacts && <List contacts={contacts} filter={filter.toLowerCase()} onDelete={handleDelete} />}\n    </div>\n  )\n}\n\nconst Filter = ({ onChange }: { onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n  return (\n    <>\n      filter shown with <input onChange={onChange} />\n    </>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}